JAVA关键字
    数据类型：byte short int long float double char boolean class interface enum void
    定义数据类型值：true false null
    定义流程控制：if else switch case default while do for break continue return
    定义访问权限修饰符：private protected public
    定义类 函数 变量修饰符：abstract final static synchronized
    定义类与类之间关系：extends implements
    定义建立实例及引用实例判断实例：new this super instanceof
    用于异常处理：try catch finally throw throws
    用于包：package import
    其他修饰符：native strictfp transient volatile assert

类 函数 变量 修饰符：
    final
        修饰类：类不能被继承
        修饰方法：方法不能被重写，且JVM会尝试将其内联,以提高运行效率
        修饰常量：在编译阶段会存入常量池中
        修饰变量：不可以被改变，如果修饰引用表示引用不可改变，引用指向的内容可以改变
    abstract
        抽象类：包含了抽象方法的类
        通过抽象类可以避免子类设计的随意性。通过抽象类可以做到严格的子类设计，使子类之间更加通用
        抽象类不能实例化
        抽象类可以包含属性 方法 构造方法。但是构造方法不能用new实例化，只能用来被子类调用
        抽象类只能用来继承
        一个抽象类可以继承另一个抽象类
        子类必须重写抽象方法
        抽象类存在的意义在于将方法的设计与实现分开了
    static
        修饰类：静态内部类
        修饰方法：静态方法。该方法属于当前类，而不属于某个对象。静态方法不能被重写。显式调用。静态方法中不能有this或super关键词
        修饰变量：静态变量。被所有实例共享。静态变量在内存中只有一份拷贝，在JVM加载类的时候置为静态变量分配一次内存。
        修饰代码块：优化代码用。静态代码块在类加载的时候就会执行且只执行这一次，多个静态代码块按照先后顺序执行。
        静态导包：
        ``` java
        import static java.lang.Math.*;
        public class Test{
            public static void main(String[] args){
                //System.out.println(Math.sin(20));传统做法
                System.out.println(sin(20));
            }
        }
        ```
    synchronized


访问权限修饰符：
        同一个类    同一个包    子类  所有类
private *
default *          *
protected   *      *         *
public  *          *         *    *
类的属性一般使用private 同时提供publicz的get/set方法
只用于本类的辅助性方法使用private 开放给其他类调用的使用public


内部类：内部类提供了更好的封装 只让外部类直接访问，不允许同一个包中其他类直接访问
    内部类可以直接访问外部类的私有属性，外部类不能访问内部类的内部属性
成员内部类：
    非静态内部类
        非静态内部类对象单独属于外部类的某个对象(先创建外部类对象才能创建内部类对象)
        非静态内部类可使用外部类成员
        非静态内部类不能有静态方法 静态属性 静态初始化块
        创建class文件时 会解析成 外部类$内部类.class
    静态内部类
        静态内部类看做外部类的一个静态成员，因此 外部类中的方法可通过 静态内部类名字.名字 访问静态内部类的静态成员， 通过 new 静态内部类() 访问静态内部类的实例
匿名内部类：适用于只使用一次的类
    new 父类构造器(实参列表)实现接口(){
        //匿名内部类类体
    }
局部内部类：定义在方法内


接口interface:
    接口中只有常量（默认 public static final）和抽象方法(接口方法必须公开 默认public)
    接口间可以继承

回调：
    CallBack
    Hook（钩子函数）：通过多态实现 传入不同子类，调用不同实现  或传入接口的不同实现类，调用不同实现
    末班方法模式

assert(断言):

